{"ast":null,"code":"import { __decorate } from \"tslib\";\nlet ChatbotComponent = class ChatbotComponent {\n  constructor() {\n    this.chats = [];\n    this.currentChat = null;\n    this.newMessage = '';\n    this.createChat(); // Create a default chat when the component initializes\n  }\n\n  sendMessage(chat) {\n    if (!this.newMessage.trim()) return;\n    const message = {\n      content: this.newMessage,\n      sentByUser: true\n    };\n    chat.messages.push(message);\n    this.generateResponse(chat, message);\n    this.newMessage = '';\n  }\n  generateResponse(chat, message) {\n    const responses = [\"I'm sorry, I didn't understand that.\", \"Could you please provide more details?\", \"Here is some information that might help...\", \"How can I assist you further?\", \"Thank you for reaching out! Let me find the answer for you.\"];\n    const randomIndex = Math.floor(Math.random() * responses.length);\n    message.response = responses[randomIndex];\n    chat.messages.push({\n      content: message.response,\n      sentByUser: false\n    });\n  }\n  createChat() {\n    const newChatId = this.chats.length + 1;\n    const newChatName = \"Chat \" + newChatId;\n    const newChat = {\n      id: newChatId,\n      name: newChatName,\n      messages: []\n    };\n    this.chats.push(newChat);\n    this.selectChat(newChat);\n  }\n  selectChat(chat) {\n    this.currentChat = chat;\n  }\n};\nChatbotComponent = __decorate([Component({\n  selector: 'app-chatbot',\n  templateUrl: './comp.html',\n  styleUrls: ['./comp.css']\n})], ChatbotComponent);\nexport { ChatbotComponent };","map":{"version":3,"mappings":";AAiBO,IAAMA,gBAAgB,GAAtB,MAAMA,gBAAgB;EAK3BC;IAJA,UAAK,GAAW,EAAE;IAClB,gBAAW,GAAgB,IAAI;IAC/B,eAAU,GAAW,EAAE;IAGrB,IAAI,CAACC,UAAU,EAAE,CAAC,CAAC;EACrB;;EAEAC,WAAW,CAACC,IAAU;IACpB,IAAI,CAAC,IAAI,CAACC,UAAU,CAACC,IAAI,EAAE,EAAE;IAC7B,MAAMC,OAAO,GAAgB;MAAEC,OAAO,EAAE,IAAI,CAACH,UAAU;MAAEI,UAAU,EAAE;IAAI,CAAE;IAC3EL,IAAI,CAACM,QAAQ,CAACC,IAAI,CAACJ,OAAO,CAAC;IAC3B,IAAI,CAACK,gBAAgB,CAACR,IAAI,EAAEG,OAAO,CAAC;IACpC,IAAI,CAACF,UAAU,GAAG,EAAE;EACtB;EAEAO,gBAAgB,CAACR,IAAU,EAAEG,OAAoB;IAC/C,MAAMM,SAAS,GAAG,CAChB,sCAAsC,EACtC,wCAAwC,EACxC,6CAA6C,EAC7C,+BAA+B,EAC/B,6DAA6D,CAC9D;IACD,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGJ,SAAS,CAACK,MAAM,CAAC;IAChEX,OAAO,CAACY,QAAQ,GAAGN,SAAS,CAACC,WAAW,CAAC;IACzCV,IAAI,CAACM,QAAQ,CAACC,IAAI,CAAC;MAAEH,OAAO,EAAED,OAAO,CAACY,QAAQ;MAAEV,UAAU,EAAE;IAAK,CAAE,CAAC;EACtE;EAEAP,UAAU;IACR,MAAMkB,SAAS,GAAG,IAAI,CAACC,KAAK,CAACH,MAAM,GAAG,CAAC;IACvC,MAAMI,WAAW,GAAG,OAAO,GAAGF,SAAS;IACvC,MAAMG,OAAO,GAAS;MAAEC,EAAE,EAAEJ,SAAS;MAAEK,IAAI,EAAEH,WAAW;MAAEZ,QAAQ,EAAE;IAAE,CAAE;IACxE,IAAI,CAACW,KAAK,CAACV,IAAI,CAACY,OAAO,CAAC;IACxB,IAAI,CAACG,UAAU,CAACH,OAAO,CAAC;EAC1B;EAEAG,UAAU,CAACtB,IAAU;IACnB,IAAI,CAACuB,WAAW,GAAGvB,IAAI;EACzB;CACD;AAzCYJ,gBAAgB,eAL5B4B,SAAS,CAAC;EACTC,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,aAAa;EAC1BC,SAAS,EAAE,CAAC,YAAY;CACzB,CAAC,GACW/B,gBAAgB,CAyC5B;SAzCYA,gBAAgB","names":["ChatbotComponent","constructor","createChat","sendMessage","chat","newMessage","trim","message","content","sentByUser","messages","push","generateResponse","responses","randomIndex","Math","floor","random","length","response","newChatId","chats","newChatName","newChat","id","name","selectChat","currentChat","Component","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["E:\\GitHub\\my-practice-all-docs\\Angular\\Projects\\ChatBot\\src\\app\\chatbot\\chatbot.component.ts"],"sourcesContent":["interface ChatMessage {\n  content: string;\n  sentByUser: boolean;\n  response?: string; // Add a response property to each message\n}\n\ninterface Chat {\n  id: number;\n  name: string;\n  messages: ChatMessage[];\n}\n\n@Component({\n  selector: 'app-chatbot',\n  templateUrl: './comp.html',\n  styleUrls: ['./comp.css']\n})\nexport class ChatbotComponent {\n  chats: Chat[] = [];\n  currentChat: Chat | null = null;\n  newMessage: string = '';\n\n  constructor() {\n    this.createChat(); // Create a default chat when the component initializes\n  }\n\n  sendMessage(chat: Chat) {\n    if (!this.newMessage.trim()) return;\n    const message: ChatMessage = { content: this.newMessage, sentByUser: true };\n    chat.messages.push(message);\n    this.generateResponse(chat, message);\n    this.newMessage = '';\n  }\n\n  generateResponse(chat: Chat, message: ChatMessage) {\n    const responses = [\n      \"I'm sorry, I didn't understand that.\",\n      \"Could you please provide more details?\",\n      \"Here is some information that might help...\",\n      \"How can I assist you further?\",\n      \"Thank you for reaching out! Let me find the answer for you.\"\n    ];\n    const randomIndex = Math.floor(Math.random() * responses.length);\n    message.response = responses[randomIndex];\n    chat.messages.push({ content: message.response, sentByUser: false });\n  }\n\n  createChat() {\n    const newChatId = this.chats.length + 1;\n    const newChatName = \"Chat \" + newChatId;\n    const newChat: Chat = { id: newChatId, name: newChatName, messages: [] };\n    this.chats.push(newChat);\n    this.selectChat(newChat);\n  }\n\n  selectChat(chat: Chat) {\n    this.currentChat = chat;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}