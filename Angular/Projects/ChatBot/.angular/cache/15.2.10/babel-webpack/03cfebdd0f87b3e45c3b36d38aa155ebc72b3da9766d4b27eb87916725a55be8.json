{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction ChatbotComponent_li_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 3);\n    i0.ɵɵlistener(\"click\", function ChatbotComponent_li_3_Template_li_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const chat_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.selectChat(chat_r4));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const chat_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(chat_r4.name);\n  }\n}\nconst _c0 = function (a0, a1) {\n  return {\n    \"sent\": a0,\n    \"received\": a1\n  };\n};\nfunction ChatbotComponent_div_7_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const message_r8 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(2, _c0, message_r8.sentByUser, !message_r8.sentByUser));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", message_r8.content, \" \");\n  }\n}\nfunction ChatbotComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtemplate(1, ChatbotComponent_div_7_div_1_Template, 2, 5, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.currentChat.messages);\n  }\n}\nfunction ChatbotComponent_input_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 11);\n    i0.ɵɵlistener(\"ngModelChange\", function ChatbotComponent_input_8_Template_input_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.newMessage = $event);\n    })(\"keyup.enter\", function ChatbotComponent_input_8_Template_input_keyup_enter_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.sendMessage(ctx_r11.chat));\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngModel\", ctx_r2.newMessage);\n  }\n}\nfunction ChatbotComponent_button_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function ChatbotComponent_button_9_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.sendMessage(ctx_r12.chat));\n    });\n    i0.ɵɵtext(1, \"Send\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class ChatbotComponent {\n  constructor() {\n    this.chats = [];\n    this.currentChat = null;\n    this.newMessage = '';\n  }\n  sendMessage() {\n    if (!this.currentChat || this.newMessage.trim() === '') return;\n    this.currentChat.messages.push({\n      content: this.newMessage,\n      sentByUser: true\n    });\n    this.generateResponse();\n    this.newMessage = '';\n  }\n  generateResponse() {\n    const responses = [\"I'm sorry, I didn't understand that.\", \"Could you please provide more details?\", \"Here is some information that might help...\", \"How can I assist you further?\", \"Thank you for reaching out! Let me find the answer for you.\", \"Java is a high-level, class-based, object-oriented programming language.\", \"Core Java refers to the basic features of the Java programming language.\", \"In Java, everything is an object, except primitive data types like int, float, etc.\", \"Java applications are typically compiled to bytecode that can run on any Java virtual machine (JVM).\", \"Java offers platform independence, meaning Java code can run on any platform that supports Java.\", \"Key concepts in Java include inheritance, encapsulation, polymorphism, and abstraction.\", \"Java provides a rich set of APIs for various tasks such as networking, I/O, database connectivity, and more.\", \"Java's syntax is similar to C and C++, making it relatively easy for programmers from those backgrounds to learn Java.\", \"Java is widely used for building enterprise-scale applications, web applications, mobile applications, and more.\", \"Java's garbage collection feature automatically manages memory, reducing the risk of memory leaks and other memory-related issues.\", \"Java supports multithreading, allowing developers to write programs that perform multiple tasks concurrently.\", \"Java is heavily used in backend development, with frameworks like Spring and Hibernate being popular choices for building robust, scalable applications.\", \"Java has a strong community and extensive documentation, making it easy to find resources and support when developing Java applications.\", \"Understanding Java fundamentals is essential for any developer looking to work in software development, particularly in the enterprise domain.\"];\n    const randomIndex = Math.floor(Math.random() * responses.length);\n    this.currentChat.messages.push({\n      content: responses[randomIndex],\n      sentByUser: false\n    });\n  }\n  selectChat(chat) {\n    this.currentChat = chat;\n  }\n  createChat() {\n    const newChatId = this.chats.length + 1;\n    const newChatName = \"Chat \" + newChatId;\n    const newChat = {\n      id: newChatId,\n      name: newChatName,\n      messages: []\n    };\n    this.chats.push(newChat);\n    this.selectChat(newChat);\n  }\n  static #_ = this.ɵfac = function ChatbotComponent_Factory(t) {\n    return new (t || ChatbotComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChatbotComponent,\n    selectors: [[\"app-chatbot\"]],\n    decls: 10,\n    vars: 4,\n    consts: [[1, \"chat-container\"], [1, \"sidebar\"], [3, \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"], [1, \"chat-area\"], [\"class\", \"messages\", 4, \"ngIf\"], [\"type\", \"text\", \"placeholder\", \"Type a message...\", 3, \"ngModel\", \"ngModelChange\", \"keyup.enter\", 4, \"ngIf\"], [3, \"click\", 4, \"ngIf\"], [1, \"messages\"], [\"class\", \"message\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"message\", 3, \"ngClass\"], [\"type\", \"text\", \"placeholder\", \"Type a message...\", 3, \"ngModel\", \"ngModelChange\", \"keyup.enter\"]],\n    template: function ChatbotComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"ul\");\n        i0.ɵɵtemplate(3, ChatbotComponent_li_3_Template, 2, 1, \"li\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function ChatbotComponent_Template_button_click_4_listener() {\n          return ctx.createChat();\n        });\n        i0.ɵɵtext(5, \"New Chat\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"div\", 4);\n        i0.ɵɵtemplate(7, ChatbotComponent_div_7_Template, 2, 1, \"div\", 5);\n        i0.ɵɵtemplate(8, ChatbotComponent_input_8_Template, 1, 1, \"input\", 6);\n        i0.ɵɵtemplate(9, ChatbotComponent_button_9_Template, 2, 0, \"button\", 7);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.chats);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.currentChat);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.currentChat);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.currentChat);\n      }\n    },\n    dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n    styles: [\".chat-container[_ngcontent-%COMP%] {\\r\\n    display: flex;\\r\\n    height: 100%;\\r\\n  }\\r\\n  \\r\\n  .sidebar[_ngcontent-%COMP%] {\\r\\n    width: 200px;\\r\\n    background-color: #f0f0f0;\\r\\n    padding: 10px;\\r\\n  }\\r\\n  \\r\\n  .sidebar[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%] {\\r\\n    list-style-type: none;\\r\\n    padding: 0;\\r\\n  }\\r\\n  \\r\\n  .sidebar[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\\r\\n    cursor: pointer;\\r\\n    padding: 5px 0;\\r\\n  }\\r\\n  \\r\\n  .chat-area[_ngcontent-%COMP%] {\\r\\n    flex: 1;\\r\\n    padding: 10px;\\r\\n    box-sizing: border-box;\\r\\n  }\\r\\n  \\r\\n  .messages[_ngcontent-%COMP%] {\\r\\n    max-height: 900px;\\r\\n    overflow-y: auto;\\r\\n  }\\r\\n  \\r\\n  .message[_ngcontent-%COMP%] {\\r\\n    background-color: #f0f0f0;\\r\\n    margin-bottom: 5px;\\r\\n    padding: 5px 10px;\\r\\n    border-radius: 5px;\\r\\n  }\\r\\n  \\r\\n  .message.sent[_ngcontent-%COMP%] {\\r\\n    background-color: #aaf;\\r\\n    align-self: flex-end;\\r\\n    text-align: right;\\r\\n  }\\r\\n  \\r\\n  .message.received[_ngcontent-%COMP%] {\\r\\n    background-color: #afa;\\r\\n  }\\r\\n  \\r\\n  input[type=\\\"text\\\"][_ngcontent-%COMP%] {\\r\\n    width: calc(100% - 70px);\\r\\n    margin-right: 10px;\\r\\n  }\\r\\n  \\r\\n  button[_ngcontent-%COMP%] {\\r\\n    width: 60px;\\r\\n  }\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY2hhdGJvdC9jaGF0Ym90LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxhQUFhO0lBQ2IsWUFBWTtFQUNkOztFQUVBO0lBQ0UsWUFBWTtJQUNaLHlCQUF5QjtJQUN6QixhQUFhO0VBQ2Y7O0VBRUE7SUFDRSxxQkFBcUI7SUFDckIsVUFBVTtFQUNaOztFQUVBO0lBQ0UsZUFBZTtJQUNmLGNBQWM7RUFDaEI7O0VBRUE7SUFDRSxPQUFPO0lBQ1AsYUFBYTtJQUNiLHNCQUFzQjtFQUN4Qjs7RUFFQTtJQUNFLGlCQUFpQjtJQUNqQixnQkFBZ0I7RUFDbEI7O0VBRUE7SUFDRSx5QkFBeUI7SUFDekIsa0JBQWtCO0lBQ2xCLGlCQUFpQjtJQUNqQixrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSxzQkFBc0I7SUFDdEIsb0JBQW9CO0lBQ3BCLGlCQUFpQjtFQUNuQjs7RUFFQTtJQUNFLHNCQUFzQjtFQUN4Qjs7RUFFQTtJQUNFLHdCQUF3QjtJQUN4QixrQkFBa0I7RUFDcEI7O0VBRUE7SUFDRSxXQUFXO0VBQ2IiLCJzb3VyY2VzQ29udGVudCI6WyIuY2hhdC1jb250YWluZXIge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGhlaWdodDogMTAwJTtcclxuICB9XHJcbiAgXHJcbiAgLnNpZGViYXIge1xyXG4gICAgd2lkdGg6IDIwMHB4O1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YwZjBmMDtcclxuICAgIHBhZGRpbmc6IDEwcHg7XHJcbiAgfVxyXG4gIFxyXG4gIC5zaWRlYmFyIHVsIHtcclxuICAgIGxpc3Qtc3R5bGUtdHlwZTogbm9uZTtcclxuICAgIHBhZGRpbmc6IDA7XHJcbiAgfVxyXG4gIFxyXG4gIC5zaWRlYmFyIHVsIGxpIHtcclxuICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgIHBhZGRpbmc6IDVweCAwO1xyXG4gIH1cclxuICBcclxuICAuY2hhdC1hcmVhIHtcclxuICAgIGZsZXg6IDE7XHJcbiAgICBwYWRkaW5nOiAxMHB4O1xyXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcclxuICB9XHJcbiAgXHJcbiAgLm1lc3NhZ2VzIHtcclxuICAgIG1heC1oZWlnaHQ6IDkwMHB4O1xyXG4gICAgb3ZlcmZsb3cteTogYXV0bztcclxuICB9XHJcbiAgXHJcbiAgLm1lc3NhZ2Uge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2YwZjBmMDtcclxuICAgIG1hcmdpbi1ib3R0b206IDVweDtcclxuICAgIHBhZGRpbmc6IDVweCAxMHB4O1xyXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xyXG4gIH1cclxuICBcclxuICAubWVzc2FnZS5zZW50IHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6ICNhYWY7XHJcbiAgICBhbGlnbi1zZWxmOiBmbGV4LWVuZDtcclxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xyXG4gIH1cclxuICBcclxuICAubWVzc2FnZS5yZWNlaXZlZCB7XHJcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjYWZhO1xyXG4gIH1cclxuICBcclxuICBpbnB1dFt0eXBlPVwidGV4dFwiXSB7XHJcbiAgICB3aWR0aDogY2FsYygxMDAlIC0gNzBweCk7XHJcbiAgICBtYXJnaW4tcmlnaHQ6IDEwcHg7XHJcbiAgfVxyXG4gIFxyXG4gIGJ1dHRvbiB7XHJcbiAgICB3aWR0aDogNjBweDtcclxuICB9XHJcbiAgIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["i0","ChatbotComponent","constructor","sendMessage","currentChat","newMessage","trim","messages","push","content","sentByUser","generateResponse","responses","randomIndex","Math","floor","random","length","selectChat","chat","createChat","newChatId","chats","newChatName","newChat","id","name","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["E:\\GitHub\\my-practice-all-docs\\Angular\\Projects\\ChatBot\\src\\app\\chatbot\\chatbot.component.html","E:\\GitHub\\my-practice-all-docs\\Angular\\Projects\\ChatBot\\src\\app\\chatbot\\chatbot.component.ts"],"sourcesContent":["<div class=\"chat-container\">\n    <div class=\"sidebar\">\n      <ul>\n        <li *ngFor=\"let chat of chats\" (click)=\"selectChat(chat)\">{{ chat.name }}</li>\n      </ul>\n      <button (click)=\"createChat()\">New Chat</button>\n    </div>\n    <div class=\"chat-area\">\n      <div *ngIf=\"currentChat\" class=\"messages\">\n        <div *ngFor=\"let message of currentChat.messages\" class=\"message\" [ngClass]=\"{'sent': message.sentByUser, 'received': !message.sentByUser}\">\n          {{ message.content }}\n        </div>\n      </div>\n      <input *ngIf=\"currentChat\" type=\"text\" placeholder=\"Type a message...\" [(ngModel)]=\"newMessage\" (keyup.enter)=\"sendMessage(chat)\">\n      <button *ngIf=\"currentChat\" (click)=\"sendMessage(chat)\">Send</button>\n    </div>\n  </div>\n  ","import { Component } from '@angular/core';\n\n\n\ninterface Message {\n  content: string;\n  sentByUser: boolean;\n}\n\ninterface Chat {\n  id: number;\n  name: string;\n  messages: Message[];\n}\n\n@Component({\n  selector: 'app-chatbot',\n  templateUrl: './chatbot.component.html',\n  styleUrls: ['./chatbot.component.css']\n})\nexport class ChatbotComponent {\n\n  chats: Chat[] = [\n\n  ];\n  currentChat: Chat | null = null;\n  newMessage: string = '';\n\n  sendMessage() {\n    if (!this.currentChat || this.newMessage.trim() === '') return;\n    this.currentChat.messages.push({ content: this.newMessage, sentByUser: true });\n    this.generateResponse();\n    this.newMessage = '';\n  }\n\n  generateResponse() {\n    const responses = [\n      \"I'm sorry, I didn't understand that.\",\n      \"Could you please provide more details?\",\n      \"Here is some information that might help...\",\n      \"How can I assist you further?\",\n      \"Thank you for reaching out! Let me find the answer for you.\",\n      \"Java is a high-level, class-based, object-oriented programming language.\",\n      \"Core Java refers to the basic features of the Java programming language.\",\n      \"In Java, everything is an object, except primitive data types like int, float, etc.\",\n      \"Java applications are typically compiled to bytecode that can run on any Java virtual machine (JVM).\",\n      \"Java offers platform independence, meaning Java code can run on any platform that supports Java.\",\n      \"Key concepts in Java include inheritance, encapsulation, polymorphism, and abstraction.\",\n      \"Java provides a rich set of APIs for various tasks such as networking, I/O, database connectivity, and more.\",\n      \"Java's syntax is similar to C and C++, making it relatively easy for programmers from those backgrounds to learn Java.\",\n      \"Java is widely used for building enterprise-scale applications, web applications, mobile applications, and more.\",\n      \"Java's garbage collection feature automatically manages memory, reducing the risk of memory leaks and other memory-related issues.\",\n      \"Java supports multithreading, allowing developers to write programs that perform multiple tasks concurrently.\",\n      \"Java is heavily used in backend development, with frameworks like Spring and Hibernate being popular choices for building robust, scalable applications.\",\n      \"Java has a strong community and extensive documentation, making it easy to find resources and support when developing Java applications.\",\n      \"Understanding Java fundamentals is essential for any developer looking to work in software development, particularly in the enterprise domain.\"\n\n    ];\n    const randomIndex = Math.floor(Math.random() * responses.length);\n    this.currentChat!.messages.push({ content: responses[randomIndex], sentByUser: false });\n  }\n\n  selectChat(chat: Chat) {\n    this.currentChat = chat;\n  }\n\n  createChat() {\n    const newChatId = this.chats.length + 1;\n    const newChatName = \"Chat \" + newChatId;\n    const newChat: Chat = { id: newChatId, name: newChatName, messages: [] };\n    this.chats.push(newChat);\n    this.selectChat(newChat);\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}