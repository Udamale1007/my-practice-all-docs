{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common\";\nimport * as i2 from \"@angular/forms\";\nfunction ChatbotComponent_li_3_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"li\", 3);\n    i0.ɵɵlistener(\"click\", function ChatbotComponent_li_3_Template_li_click_0_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r6);\n      const chat_r4 = restoredCtx.$implicit;\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.selectChat(chat_r4));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const chat_r4 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(chat_r4.name);\n  }\n}\nconst _c0 = function (a0, a1) {\n  return {\n    \"sent\": a0,\n    \"received\": a1\n  };\n};\nfunction ChatbotComponent_div_7_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const message_r8 = ctx.$implicit;\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(2, _c0, message_r8.sentByUser, !message_r8.sentByUser));\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", message_r8.content, \" \");\n  }\n}\nfunction ChatbotComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtemplate(1, ChatbotComponent_div_7_div_1_Template, 2, 5, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r1.currentChat.messages);\n  }\n}\nfunction ChatbotComponent_input_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r10 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"input\", 11);\n    i0.ɵɵlistener(\"ngModelChange\", function ChatbotComponent_input_8_Template_input_ngModelChange_0_listener($event) {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r9 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r9.newMessage = $event);\n    })(\"keyup.enter\", function ChatbotComponent_input_8_Template_input_keyup_enter_0_listener() {\n      i0.ɵɵrestoreView(_r10);\n      const ctx_r11 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r11.sendMessage());\n    });\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngModel\", ctx_r2.newMessage);\n  }\n}\nfunction ChatbotComponent_button_9_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r13 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"button\", 3);\n    i0.ɵɵlistener(\"click\", function ChatbotComponent_button_9_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r13);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.sendMessage());\n    });\n    i0.ɵɵtext(1, \"Send\");\n    i0.ɵɵelementEnd();\n  }\n}\nexport class ChatbotComponent {\n  constructor() {\n    this.chats = [];\n    this.currentChat = null;\n    this.newMessage = '';\n    this.createChat(); // Create a default chat when the component initializes\n  }\n\n  sendMessage(chat) {\n    if (!this.newMessage.trim()) return;\n    const message = {\n      content: this.newMessage,\n      sentByUser: true\n    };\n    chat.messages.push(message);\n    this.generateResponse(chat, message);\n    this.newMessage = '';\n  }\n  generateResponse(chat, message) {\n    const responses = [\"I'm sorry, I didn't understand that.\", \"Could you please provide more details?\", \"Here is some information that might help...\", \"How can I assist you further?\", \"Thank you for reaching out! Let me find the answer for you.\"];\n    const randomIndex = Math.floor(Math.random() * responses.length);\n    message.response = responses[randomIndex];\n    chat.messages.push({\n      content: message.response,\n      sentByUser: false\n    });\n  }\n  createChat() {\n    const newChatId = this.chats.length + 1;\n    const newChatName = \"Chat \" + newChatId;\n    const newChat = {\n      id: newChatId,\n      name: newChatName,\n      messages: []\n    };\n    this.chats.push(newChat);\n    this.selectChat(newChat);\n  }\n  selectChat(chat) {\n    this.currentChat = chat;\n  }\n  static #_ = this.ɵfac = function ChatbotComponent_Factory(t) {\n    return new (t || ChatbotComponent)();\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChatbotComponent,\n    selectors: [[\"app-chatbot\"]],\n    decls: 10,\n    vars: 4,\n    consts: [[1, \"chat-container\"], [1, \"sidebar\"], [3, \"click\", 4, \"ngFor\", \"ngForOf\"], [3, \"click\"], [1, \"chat-area\"], [\"class\", \"messages\", 4, \"ngIf\"], [\"type\", \"text\", \"placeholder\", \"Type a message...\", 3, \"ngModel\", \"ngModelChange\", \"keyup.enter\", 4, \"ngIf\"], [3, \"click\", 4, \"ngIf\"], [1, \"messages\"], [\"class\", \"message\", 3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [1, \"message\", 3, \"ngClass\"], [\"type\", \"text\", \"placeholder\", \"Type a message...\", 3, \"ngModel\", \"ngModelChange\", \"keyup.enter\"]],\n    template: function ChatbotComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"ul\");\n        i0.ɵɵtemplate(3, ChatbotComponent_li_3_Template, 2, 1, \"li\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"button\", 3);\n        i0.ɵɵlistener(\"click\", function ChatbotComponent_Template_button_click_4_listener() {\n          return ctx.createChat();\n        });\n        i0.ɵɵtext(5, \"New Chat\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(6, \"div\", 4);\n        i0.ɵɵtemplate(7, ChatbotComponent_div_7_Template, 2, 1, \"div\", 5);\n        i0.ɵɵtemplate(8, ChatbotComponent_input_8_Template, 1, 1, \"input\", 6);\n        i0.ɵɵtemplate(9, ChatbotComponent_button_9_Template, 2, 0, \"button\", 7);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngForOf\", ctx.chats);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngIf\", ctx.currentChat);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.currentChat);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.currentChat);\n      }\n    },\n    dependencies: [i1.NgClass, i1.NgForOf, i1.NgIf, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel],\n    styles: [\".container-fluid[_ngcontent-%COMP%] {\\r\\n  height: 100vh;\\r\\n  background-color: #f8f9fa;\\r\\n}\\r\\n\\r\\n.sidebar[_ngcontent-%COMP%] {\\r\\n  background-color: #3f3f3f;\\r\\n  color: #fff;\\r\\n  padding: 20px;\\r\\n  height: 100%;\\r\\n}\\r\\n\\r\\n.chat-option[_ngcontent-%COMP%] {\\r\\n  cursor: pointer;\\r\\n  padding: 10px;\\r\\n  border-radius: 5px;\\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n\\r\\n.chat-option[_ngcontent-%COMP%]:hover {\\r\\n  background-color: #555;\\r\\n}\\r\\n\\r\\n.chat-area[_ngcontent-%COMP%] {\\r\\n  background-color: #fff;\\r\\n  padding: 20px;\\r\\n  height: calc(100% - 40px); \\r\\n  overflow-y: auto;\\r\\n}\\r\\n\\r\\n.message[_ngcontent-%COMP%] {\\r\\n  background-color: #e5e5ea;\\r\\n  padding: 10px;\\r\\n  border-radius: 10px;\\r\\n  margin-bottom: 10px;\\r\\n}\\r\\n\\r\\n.message.sent[_ngcontent-%COMP%] {\\r\\n  background-color: #007bff;\\r\\n  color: #fff;\\r\\n}\\r\\n\\r\\n.message.received[_ngcontent-%COMP%] {\\r\\n  background-color: #6c757d;\\r\\n  color: #fff;\\r\\n}\\r\\n\\r\\ninput[type=\\\"text\\\"][_ngcontent-%COMP%] {\\r\\n  width: calc(100% - 60px);\\r\\n  padding: 10px;\\r\\n  border: none;\\r\\n  border-radius: 20px;\\r\\n  margin-right: 10px;\\r\\n}\\r\\n\\r\\nbutton[_ngcontent-%COMP%] {\\r\\n  width: 50px;\\r\\n  border-radius: 20px;\\r\\n}\\r\\n\\r\\n.btn-primary[_ngcontent-%COMP%] {\\r\\n  background-color: #007bff;\\r\\n  color: #fff;\\r\\n}\\r\\n\\r\\n.btn-primary[_ngcontent-%COMP%]:hover {\\r\\n  background-color: #0056b3;\\r\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY2hhdGJvdC9jaGF0Ym90LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxhQUFhO0VBQ2IseUJBQXlCO0FBQzNCOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCLFdBQVc7RUFDWCxhQUFhO0VBQ2IsWUFBWTtBQUNkOztBQUVBO0VBQ0UsZUFBZTtFQUNmLGFBQWE7RUFDYixrQkFBa0I7RUFDbEIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0Usc0JBQXNCO0FBQ3hCOztBQUVBO0VBQ0Usc0JBQXNCO0VBQ3RCLGFBQWE7RUFDYix5QkFBeUIsRUFBRSxxQkFBcUI7RUFDaEQsZ0JBQWdCO0FBQ2xCOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsbUJBQW1CO0FBQ3JCOztBQUVBO0VBQ0UseUJBQXlCO0VBQ3pCLFdBQVc7QUFDYjs7QUFFQTtFQUNFLHlCQUF5QjtFQUN6QixXQUFXO0FBQ2I7O0FBRUE7RUFDRSx3QkFBd0I7RUFDeEIsYUFBYTtFQUNiLFlBQVk7RUFDWixtQkFBbUI7RUFDbkIsa0JBQWtCO0FBQ3BCOztBQUVBO0VBQ0UsV0FBVztFQUNYLG1CQUFtQjtBQUNyQjs7QUFFQTtFQUNFLHlCQUF5QjtFQUN6QixXQUFXO0FBQ2I7O0FBRUE7RUFDRSx5QkFBeUI7QUFDM0IiLCJzb3VyY2VzQ29udGVudCI6WyIuY29udGFpbmVyLWZsdWlkIHtcclxuICBoZWlnaHQ6IDEwMHZoO1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICNmOGY5ZmE7XHJcbn1cclxuXHJcbi5zaWRlYmFyIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjM2YzZjNmO1xyXG4gIGNvbG9yOiAjZmZmO1xyXG4gIHBhZGRpbmc6IDIwcHg7XHJcbiAgaGVpZ2h0OiAxMDAlO1xyXG59XHJcblxyXG4uY2hhdC1vcHRpb24ge1xyXG4gIGN1cnNvcjogcG9pbnRlcjtcclxuICBwYWRkaW5nOiAxMHB4O1xyXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcclxuICBtYXJnaW4tYm90dG9tOiAxMHB4O1xyXG59XHJcblxyXG4uY2hhdC1vcHRpb246aG92ZXIge1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICM1NTU7XHJcbn1cclxuXHJcbi5jaGF0LWFyZWEge1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmY7XHJcbiAgcGFkZGluZzogMjBweDtcclxuICBoZWlnaHQ6IGNhbGMoMTAwJSAtIDQwcHgpOyAvKiBTdWJ0cmFjdCBwYWRkaW5nICovXHJcbiAgb3ZlcmZsb3cteTogYXV0bztcclxufVxyXG5cclxuLm1lc3NhZ2Uge1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICNlNWU1ZWE7XHJcbiAgcGFkZGluZzogMTBweDtcclxuICBib3JkZXItcmFkaXVzOiAxMHB4O1xyXG4gIG1hcmdpbi1ib3R0b206IDEwcHg7XHJcbn1cclxuXHJcbi5tZXNzYWdlLnNlbnQge1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XHJcbiAgY29sb3I6ICNmZmY7XHJcbn1cclxuXHJcbi5tZXNzYWdlLnJlY2VpdmVkIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNmM3NTdkO1xyXG4gIGNvbG9yOiAjZmZmO1xyXG59XHJcblxyXG5pbnB1dFt0eXBlPVwidGV4dFwiXSB7XHJcbiAgd2lkdGg6IGNhbGMoMTAwJSAtIDYwcHgpO1xyXG4gIHBhZGRpbmc6IDEwcHg7XHJcbiAgYm9yZGVyOiBub25lO1xyXG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XHJcbiAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xyXG59XHJcblxyXG5idXR0b24ge1xyXG4gIHdpZHRoOiA1MHB4O1xyXG4gIGJvcmRlci1yYWRpdXM6IDIwcHg7XHJcbn1cclxuXHJcbi5idG4tcHJpbWFyeSB7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwN2JmZjtcclxuICBjb2xvcjogI2ZmZjtcclxufVxyXG5cclxuLmJ0bi1wcmltYXJ5OmhvdmVyIHtcclxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA1NmIzO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["i0","ChatbotComponent","constructor","createChat","sendMessage","chat","newMessage","trim","message","content","sentByUser","messages","push","generateResponse","responses","randomIndex","Math","floor","random","length","response","newChatId","chats","newChatName","newChat","id","name","selectChat","currentChat","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["E:\\GitHub\\my-practice-all-docs\\Angular\\Projects\\ChatBot\\src\\app\\chatbot\\chatbot.component.html","E:\\GitHub\\my-practice-all-docs\\Angular\\Projects\\ChatBot\\src\\app\\chatbot\\chatbot.component.ts"],"sourcesContent":["<div class=\"chat-container\">\n    <div class=\"sidebar\">\n      <ul>\n        <li *ngFor=\"let chat of chats\" (click)=\"selectChat(chat)\">{{ chat.name }}</li>\n      </ul>\n      <button (click)=\"createChat()\">New Chat</button>\n    </div>\n    <div class=\"chat-area\">\n      \n      <div *ngIf=\"currentChat\" class=\"messages\">\n        <div *ngFor=\"let message of currentChat.messages\" class=\"message\" [ngClass]=\"{'sent': message.sentByUser, 'received': !message.sentByUser}\">\n          {{ message.content }}\n        </div>\n      </div>\n      <input *ngIf=\"currentChat\" type=\"text\" placeholder=\"Type a message...\" [(ngModel)]=\"newMessage\" (keyup.enter)=\"sendMessage()\">\n      <button *ngIf=\"currentChat\" (click)=\"sendMessage()\">Send</button>\n    </div>\n  </div>\n  ","import { Component } from \"@angular/core\";\n\ninterface ChatMessage {\n  content: string;\n  sentByUser: boolean;\n  response?: string; // Add a response property to each message\n}\n\ninterface Chat {\n  id: number;\n  name: string;\n  messages: ChatMessage[];\n}\n\n@Component({\n  selector: 'app-chatbot',\n  templateUrl: './chatbot.component.html',\n  styleUrls: ['./chatbot.component.css']\n})\n\nexport class ChatbotComponent {\n  chats: Chat[] = [];\n  currentChat: Chat | null = null;\n  newMessage: string = '';\n\n  constructor() {\n    this.createChat(); // Create a default chat when the component initializes\n  }\n\n  sendMessage(chat: Chat) {\n    if (!this.newMessage.trim()) return;\n    const message: ChatMessage = { content: this.newMessage, sentByUser: true };\n    chat.messages.push(message);\n    this.generateResponse(chat, message);\n    this.newMessage = '';\n  }\n\n  generateResponse(chat: Chat, message: ChatMessage) {\n    const responses = [\n      \"I'm sorry, I didn't understand that.\",\n      \"Could you please provide more details?\",\n      \"Here is some information that might help...\",\n      \"How can I assist you further?\",\n      \"Thank you for reaching out! Let me find the answer for you.\"\n    ];\n    const randomIndex = Math.floor(Math.random() * responses.length);\n    message.response = responses[randomIndex];\n    chat.messages.push({ content: message.response, sentByUser: false });\n  }\n\n  createChat() {\n    const newChatId = this.chats.length + 1;\n    const newChatName = \"Chat \" + newChatId;\n    const newChat: Chat = { id: newChatId, name: newChatName, messages: [] };\n    this.chats.push(newChat);\n    this.selectChat(newChat);\n  }\n\n  selectChat(chat: Chat) {\n    this.currentChat = chat;\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}